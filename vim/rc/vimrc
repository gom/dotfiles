" <encoding>
set encoding=utf-8
set fileencodings=ucs-bom,iso-2022-jp-3,iso-2022-jp,utf-8,eucjp-ms,euc-jisx0213,euc-jp,sjis,cp932,default,latin
set fileformats=unix,mac,dos
set termencoding=utf-8

" <Plugins: dein.vim>
" プラグインが実際にインストールされるディレクトリ
let s:dein_dir = expand('~/.cache/dein')
" dein.vim 本体
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" 設定開始
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  " プラグインリストを収めた TOML ファイル
  " 予め TOML ファイル（後述）を用意しておく
  let g:rc_dir    = expand('~/.vim/rc')
  let s:toml      = g:rc_dir . '/dein.toml'
  let s:lazy_toml = g:rc_dir . '/dein_lazy.toml'

  " TOML を読み込み、キャッシュしておく
  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  " 設定終了
  call dein#end()
  call dein#save_state()
endif

" もし、未インストールものものがあったらインストール
if dein#check_install()
  call dein#install()
endif


" <indent>
"set tabstop=4 "displayed tab width
set expandtab "tab to space
set shiftwidth=2 "space for autoindent
set autoindent

" <status line>
set laststatus=2 "always show status line
set statusline=[%n%{bufnr('$')>1?'/'.bufnr('$'):''}%{winnr('$')>1?':'.winnr().'/'.winnr('$'):''}]%<%f%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l/%L,%c%V%8P

" <basic>
let mapleader = ","
set nobackup
set hidden
set formatoptions+=mM "text format options
set visualbell "noerrorbells
set backspace=indent,eol,start
set whichwrap=b,s,h,l,<,>,[,]
"set wrap "wrap at end of line
set autoread
set scrolloff=5
set hid " enable switch buffer to keep editing current file

set nocompatible "vi compatible
syntax on
filetype indent plugin on

" <display>
set number "show line numbers
set showmatch "show needed parenthness
set ruler "show line number & char number
set notitle "display title
set showcmd "display command at status line
set nolist "show tab and CR/LF
set cursorline

" <search>
set ignorecase " ignore case for search
set wrapscan "when searching, end to begin of the file
set hlsearch " highlight search result
set smartcase "if start with upper case, not ignore case

" <completion>
set wildmenu "set filelist
set wildmode=list:full
set history=1000

" <FileType>
au BufRead,BufNewFile,BufReadPre *.coffee   set filetype=coffee
au FileType ruby set ts=2 sw=2 expandtab
au FileType js set ts=2 sw=2 expandtab
au FileType json set ts=2 sw=2 expandtab
au FileType php set ts=4 sw=4 expandtab
au FileType php5 set ts=4 sw=4 expandtab
au FileType coffee setlocal ts=2 sw=2 sts=2 expandtab

" <Template>
autocmd BufNewFile *.rb 0r ~/.vim/templates/rb.tpl

" <Tab>
set showtabline=2
nnoremap <Space>t t
nnoremap <Space>T T
nnoremap t <Nop>
nnoremap <silent> tc :<C-u>tabnew<CR>:tabmove<CR>
nnoremap <silent> tk :<C-u>tabclose<CR>
nnoremap <silent> tn :<C-u>tabnext<CR>
nnoremap <silent> tp :<C-u>tabprevious<CR>

" <folding>
nnoremap <expr> h foldlevel(getpos('.')[1])>0 &&
      \(getpos('.')[2]==1 \|\|
      \getline('.')[: getpos('.')[2]-2] =~ "^[\<TAB> ]*$" )?"zch":"h"

" via http://nanabit.net/blog/2007/11/06/vim-wincmd/
" <keybinds>
nnoremap j gj
nnoremap k gk

map! <C-a> <Home>
map! <C-e> <End>
map <silent> <F2> :bp<cr>
map <silent> <F3> :bn<cr>
map <silent> <C-xb> :ls<CR>:buf

nnoremap <Space>. :<C-u>edit $MYVIMRC<CR>
nnoremap <Space>s. :<C-u>source $MYVIMRC<CR> :<C-u>source $MYGVIMRC<CR>
nnoremap <Space>w :write<CR>
nnoremap <Space>d :bd<CR>
nnoremap <Space>q :q<CR>
nnoremap <C-h> :<C-u>help<Space>
nnoremap <C-h><C-h> :<C-u>help<Space><C-r><C-w><CR>

" yank, paste with os clipboard
" http://relaxedcolumn.blog8.fc2.com/blog-entry-125.html
noremap <Space>y "+y
noremap <Space>p "+p

inoremap <C-d> <Delete>
inoremap <C-f> <Right>
inoremap <C-b> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>

nmap sj <C-W>j<C-w>_
nmap sk <C-W>k<C-w>_
nmap sh <C-w>h<C-w>_
nmap sl <C-w>l<C-w>_

" <emacs keybinds>
nnoremap <C-n> gj
nnoremap <C-p> gk

" <MacVim>
if has('mac')
 source $VIMRUNTIME/delmenu.vim
 set langmenu=ja_jp.utf-8
 source $VIMRUNTIME/menu.vim
endif

" <Golang>
if $GOROOT != ''
  set rtp+=${GOROOT}/misc/vim
endif
if $GOPATH != ''
  set rtp+=${GOPATH}/src/github.com/nsf/gocode/vim
  set rtp+=${GOPATH}/src/github.com/golang/lint/misc/vim
endif

"use goimports instead of gofmt
let g:gofmt_command = 'goimports'

""保存時に :Fmt
au BufWritePre *.go GoImports
au BufNewFile,BufRead *.go set sw=4 noexpandtab ts=4
""au FileType go compiler go

" <Plugins>

colorscheme desert
highlight CursorLine cterm=none ctermbg=black

" <Plugins:Gtags>
nnoremap <C-q> <C-w><C-w><C-w>q
map <C-g> :Gtags
map <C-i> :Gtags -f %<CR>
map <C-j> :GtagsCursor<CR>
"map <C-n> :cn<CR>
"map <C-p> :cp<CR>

" <Plugins:unite>
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
let g:unite_source_file_mru_filename_format = ''

" Prefix key
nnoremap    [unite]   <Nop>
nmap    f [unite]

noremap <silent> [unite]b :Unite buffer<CR>
noremap <silent> [unite]f :UniteWithBufferDir -buffer-name=files file file/new<CR>
noremap <silent> [unite]r :Unite -buffer-name=register register<CR>
noremap <silent> [unite]m :Unite file_mru<CR>
noremap <silent> [unite]i :Unite buffer file_mru<CR>
noremap <silent> [unite]c :Unite bookmark<CR>
noremap <silent> [unite]d :UniteBookmarkAdd<CR>
noremap <silent> uc :Unite bookmark<CR>
noremap <silent> ud :UniteBookmarkAdd<CR>
nnoremap <silent> [unite]a :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file file/new<CR>
nnoremap <silent> [unite]y :<C-u>Unite history/yank<CR>
nnoremap <silent> [unite]l :<C-u>Unite -auto-preview colorscheme<CR>


" new tab
nnoremap <silent> tb :<C-u>tabnew<CR>:tabmove<CR>:Unite buffer<CR>
nnoremap <silent> tf :<C-u>tabnew<CR>:tabmove<CR>:UniteWithBufferDir -buffer-name=files file file/new<CR>
nnoremap <silent> tm :<C-u>tabnew<CR>:tabmove<CR>:Unite file_mru<CR>
nnoremap <silent> ti :<C-u>tabnew<CR>:tabmove<CR>:Unite buffer file_mru<CR>
nnoremap <silent> ta :<C-u>tabnew<CR>:tabmove<CR>:UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file file/new<CR>
nnoremap <silent> tc :<C-u>tabnew<CR>:tabmove<CR>:Unite bookmark<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj <Plug>(unite_insert_leave)
  imap <buffer> <C-w> <Plug>(unite_delete_backward_path)

  " split window
  nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')

  nnoremap <silent> <buffer> <expr> <C-k> unite#do_action('delete')
  inoremap <silent> <buffer> <expr> <C-k> unite#do_action('delete')
endfunction "}}}

" <Plugins:vim-indent-guides>
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1

hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=237
au FileType coffee,ruby,javascript,python IndentGuidesEnable
nmap <silent><Leader>ig <Plug>IndentGuidesToggle

" <Plugins:neocomplete>
if has ("lua")
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" Use neocomplete.
	let g:neocomplete#enable_at_startup = 1
	" Use smartcase.
	let g:neocomplete#enable_smart_case = 1
	" Set minimum syntax keyword length.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
		" For no inserting <CR> key.
		"return pumvisible() ? "\<C-y>" : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
endif

" <Plugins: vim-airline>
set laststatus=2
set showtabline=2 " Always show tabline
set t_Co=256
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline_theme='papercolor'
"let g:airline_powerline_fonts = 1
